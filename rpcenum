#!/bin/bash

# Author: Marcelo VÃ¡zquez (aka S4vitar) & R1pFr4n

#Colours
greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[0;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"

declare -r tmp_file="/dev/shm/tmp_file"
declare -r tmp_file2="/dev/shm/tmp_file2"
declare -r tmp_file3="/dev/shm/tmp_file3"

function ctrl_c(){

	echo -e "\n${yellowColour}[*]${endColour}${grayColour} Exiting...${endColour}"; sleep 1
	rm $tmp_file 2>/dev/null
	tput cnorm; exit 1
}
trap ctrl_c INT

function helpPanel(){

	echo -e "\n${yellowColour}[*]${endColour}${grayColour} Uso: rpcenum${endColour}"
	echo -e "\n\t${purpleColour}e)${endColour}${yellowColour} Enumeration Mode${endColour}"
	echo -e "\n\t\t${grayColour}DUsers${endColour}${redColour} (Domain Users)${endColour}"
	echo -e "\t\t${grayColour}DUsersInfo${endColour}${redColour} (Domain Users with description info)${endColour}"
	echo -e "\t\t${grayColour}DAUsers ${redColour}(Domain Admin Users)${endColour}"
	echo -e "\t\t${grayColour}DGroups ${redColour}(Domain Groups)${endColour}"
	echo -e "\t\t${grayColour}DUsersbyGroup ${redColour}(Domain Groups and their Users)${endColour}"
	echo -e "\t\t${grayColour}DGroupsbyUser ${redColour}(Users and their Domain Groups)${endColour}"
	echo -e "\t\t${grayColour}All ${redColour}(All Modes)${endColour}"
	echo -e "\n\t${purpleColour}i)${endColour}${yellowColour} Host IP Address${endColour}"
	echo -e "\n\t${purpleColour}N)${endColour}${yellowColour} Use guest session (no authentication)${endColour}"
	echo -e "\n\t${purpleColour}u)${endColour}${yellowColour} Username${endColour}"
	echo -e "\n\t${purpleColour}p)${endColour}${yellowColour} Password${endColour}"
	echo -e "\n\t${purpleColour}h)${endColour}${yellowColour} Show this help pannel${endColour}"
	exit 1
}

function printTable(){

    local -r delimiter="${1}"
    local -r data="$(removeEmptyLines "${2}")"

    if [[ "${delimiter}" != '' && "$(isEmptyString "${data}")" = 'false' ]]
    then
        local -r numberOfLines="$(wc -l <<< "${data}")"

        if [[ "${numberOfLines}" -gt '0' ]]
        then
            local table=''
            local i=1

            for ((i = 1; i <= "${numberOfLines}"; i = i + 1))
            do
                local line=''
                line="$(sed "${i}q;d" <<< "${data}")"

                local numberOfColumns='0'
                numberOfColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${line}")"

                if [[ "${i}" -eq '1' ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi

                table="${table}\n"

                local j=1

                for ((j = 1; j <= "${numberOfColumns}"; j = j + 1))
                do
                    table="${table}$(printf '#| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                done

                table="${table}#|\n"

                if [[ "${i}" -eq '1' ]] || [[ "${numberOfLines}" -gt '1' && "${i}" -eq "${numberOfLines}" ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi
            done

            if [[ "$(isEmptyString "${table}")" = 'false' ]]
            then
                echo -e "${table}" | column -s '#' -t | awk '/^\+/{gsub(" ", "-", $0)}1'
            fi
        fi
    fi
}

function removeEmptyLines(){

    local -r content="${1}"
    echo -e "${content}" | sed '/^\s*$/d'
}

function repeatString(){

    local -r string="${1}"
    local -r numberToRepeat="${2}"

    if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]
    then
        local -r result="$(printf "%${numberToRepeat}s")"
        echo -e "${result// /${string}}"
    fi
}

function isEmptyString(){

    local -r string="${1}"

    if [[ "$(trimString "${string}")" = '' ]]
    then
        echo 'true' && return 0
    fi

    echo 'false' && return 1
}

function trimString(){

    local -r string="${1}"
    sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}

function extract_DUsers(){

	echo -e "\n${yellowColour}[*]${endColour}${grayColour} Enumerating Domain Users...${endColour}\n"
	domain_users=$(eval "$1 -c enumdomusers | grep -oP '\[.*?\]' | grep -v 0x | tr -d '[]'")

	# Count the total number of domain users for the progress bar
	total_users=$(echo $domain_users | wc -w)

	# Initialize the progress bar
	progress=0
	echo -ne "${greenColour}Progress:${endColour} ["

	echo "Users" > $tmp_file && for user in $domain_users; do
		echo "$user" >> $tmp_file

		# Update the progress bar
		progress=$((progress + 1))
		percentage=$((progress * 100 / total_users))
		echo -ne "\\r${greenColour}Progress:${endColour} ["
		for i in {1..50}; do
			if [ $((i * 2)) -le $percentage ]; then
				echo -ne "${greenColour}#${endColour}"
			else
				echo -ne "-"
			fi
		done
		echo -ne "] ${greenColour}$percentage%${endColour}"
	done

	# Finish the progress bar
	echo -ne "\\r${greenColour}Progress:${endColour} ["
	for i in {1..50}; do
		if [ $((i * 2)) -le 100 ]; then
			echo -ne "${greenColour}#${endColour}"
		else
			echo -ne "-"
		fi
	done
	echo -ne "] ${greenColour}100%${endColour}\n\n"

	echo -ne "${blueColour}"; printTable ' ' "$(cat $tmp_file)"; echo -ne "${endColour}"
	rm $tmp_file 2>/dev/null
}


function extract_DUsers_Info(){

	# Extract the domain users and count them for the progress bar
	extract_DUsers "${1}" > /dev/null 2>&1
	total_users=$(echo $domain_users | wc -w)

	echo -e "\n${yellowColour}[*]${endColour}${grayColour} Listing domain users with description...${endColour}\n"

	# Initialize the progress bar
	progress=0
	echo -ne "${greenColour}Progress:${endColour} ["

	for user in $domain_users; do
		eval "$1 -c \"queryuser $user\" | grep -E 'User Name|Description' | cut -d ':' -f 2-100 | sed 's/\t//' | tr '\n' ',' | sed 's/.$//' >> $tmp_file"
		echo -e '\n' >> $tmp_file

		# Update the progress bar
		progress=$((progress + 1))
		percentage=$((progress * 100 / total_users))
		echo -ne "\\r${greenColour}Progress:${endColour} ["
		for i in {1..50}; do
			if [ $((i * 2)) -le $percentage ]; then
				echo -ne "${greenColour}#${endColour}"
			else
				echo -ne "-"
			fi
		done
		echo -ne "] ${greenColour}$percentage%${endColour}"
	done

	# Finish the progress bar
	echo -ne "\\r${greenColour}Progress:${endColour} ["
	for i in {1..50}; do
		if [ $((i * 2)) -le 100 ]; then
			echo -ne "${greenColour}#${endColour}"
		else
			echo -ne "-"
		fi
	done
	echo -ne "] ${greenColour}100%${endColour}\n\n"

	echo "User,Description" > $tmp_file2

	cat $tmp_file | sed '/^\s*$/d' | while read user_representation; do
		if [ "$(echo $user_representation | awk '{print $2}' FS=',')" ]; then
			echo "$(echo $user_representation | awk '{print $1}' FS=','),$(echo $user_representation | awk '{print $2}' FS=',')" >> $tmp_file2
		fi
	done

	rm $tmp_file; mv $tmp_file2 $tmp_file
	sleep 1; echo -ne "${blueColour}"; printTable ',' "$(cat $tmp_file)"; echo -ne "${endColour}"
	rm $tmp_file 2>/dev/null
}


function extract_DAUsers(){

	echo -e "\n${yellowColour}[*]${endColour}${grayColour} Enumerating Domain Admin Users...${endColour}\n"
	rid_dagroup=$(eval "$1 -c enumdomgroups" | grep "Domain Admins" | awk 'NF{print $NF}' | grep -oP '\[.*?\]' | tr -d '[]')
	rid_dausers=$(eval "$1 -c \"querygroupmem $rid_dagroup\"" | awk '{print $1}' | grep -oP '\[.*?\]' | tr -d '[]')

	# Count the total number of domain admin users
	total_users=$(echo $rid_dausers | wc -w)

	# Initialize the progress bar
	progress=0
	echo -ne "${greenColour}Progress:${endColour} ["

	echo "DomainAdminUsers" > $tmp_file; for da_user_rid in $rid_dausers; do
		eval "$1 -c \"queryuser $da_user_rid\"" | grep 'User Name'| awk 'NF{print $NF}' >> $tmp_file

		# Update the progress bar
		progress=$((progress + 1))
		percentage=$((progress * 100 / total_users))
		echo -ne "\\r${greenColour}Progress:${endColour} ["
		for i in {1..50}; do
			if [ $((i * 2)) -le $percentage ]; then
				echo -ne "${greenColour}#${endColour}"
			else
				echo -ne "-"
			fi
		done
		echo -ne "] ${greenColour}$percentage%${endColour}"
	done

	# Finish the progress bar
	echo -ne "\\r${greenColour}Progress:${endColour} ["
	for i in {1..50}; do
		if [ $((i * 2)) -le 100 ]; then
			echo -ne "${greenColour}#${endColour}"
		else
			echo -ne "-"
		fi
	done
	echo -ne "] ${greenColour}100%${endColour}\n\n"

	echo -ne "${blueColour}"; printTable ' ' "$(cat $tmp_file)"; echo -ne "${endColour}"
	rm $tmp_file 2>/dev/null
}


function extract_DGroups(){

	echo -e "\n${yellowColour}[*]${endColour}${grayColour} Enumerating Domain Groups...${endColour}\n"

	# Count the total number of domain groups
	total_groups=$(eval "$1 -c enumdomgroups" | grep -oP '\[.*?\]' | grep "0x" | wc -l)

	# Initialize the progress bar
	progress=0
	echo -ne "${greenColour}Progress:${endColour} ["

	eval "$1 -c enumdomgroups" | grep -oP '\[.*?\]' | grep "0x" | tr -d '[]' >> $tmp_file

	echo "DomainGroup,Description" > $tmp_file2
	cat $tmp_file | while read rid_domain_groups; do
		eval "$1 -c \"querygroup $rid_domain_groups\"" | grep -E 'Group Name|Description' | sed 's/\t//' > $tmp_file3
		group_name=$(cat $tmp_file3 | grep "Group Name" | awk '{print $2}' FS=":")
		group_description=$(cat $tmp_file3 | grep "Description" | awk '{print $2}' FS=":")

		echo "$(echo $group_name),$(echo $group_description)" >> $tmp_file2

		# Update the progress bar
		progress=$((progress + 1))
		percentage=$((progress * 100 / total_groups))
		echo -ne "\\r${greenColour}Progress:${endColour} ["
		for i in {1..50}; do
			if [ $((i * 2)) -le $percentage ]; then
				echo -ne "${greenColour}#${endColour}"
			else
				echo -ne "-"
			fi
		done
		echo -ne "] ${greenColour}$percentage%${endColour}"
	done

	# Finish the progress bar
	echo -ne "\\r${greenColour}Progress:${endColour} ["
	for i in {1..50}; do
		if [ $((i * 2)) -le 100 ]; then
			echo -ne "${greenColour}#${endColour}"
		else
			echo -ne "-"
		fi
	done
	echo -ne "] ${greenColour}100%${endColour}\n\n"

	rm $tmp_file $tmp_file3 2>/dev/null && mv $tmp_file2 $tmp_file
	echo -ne "${blueColour}"; printTable ',' "$(cat $tmp_file)"; echo -ne "${endColour}"
	rm $tmp_file 2>/dev/null
}

function extract_All(){
	extract_DUsers "${1}"
	extract_DUsers_Info "${1}"
	extract_DAUsers "${1}"
	extract_DGroups "${1}"
	extract_DUsersbyGroup "${1}"
	extract_DGroupsbyUser "${1}"
}


function extract_DUsersbyGroup() {

    echo -e "\n${yellowColour}[*]${endColour}${grayColour} Enumerating Domain Groups and their Users...${endColour}\n"

    # Count the total number of domain groups
    total_groups=$(eval "$1 -c enumdomgroups" | grep -oP '\[.*?\]' | grep "0x" | wc -l)

    # Initialize the progress bar
    progress=0
    echo -ne "${greenColour}Progress:${endColour} ["

    eval "$1 -c enumdomgroups" | grep -oP '\[.*?\]' | grep "0x" | tr -d '[]' > $tmp_file
    echo "Domain Groups|Users" > $tmp_file2
    cat $tmp_file | while read rid_domain_groups; do
        group_name=$(eval "$1 -c \"querygroup $rid_domain_groups\"" | grep 'Group Name' | cut -d ':' -f 2-)
        rid_group_members=$(eval "$1 -c \"querygroupmem $rid_domain_groups\"" | awk '{print $1}' | grep -oP '\[.*?\]' | tr -d '[]')

        user_names=""
        for rid_user in $rid_group_members; do
            user_name=$(eval "$1 -c \"queryuser $rid_user\"" | grep 'User Name' | cut -d ':' -f 2-)
            if [[ ! $user_name =~ \$$ ]]; then # Check if user_name does not end with $
                user_names+="$user_name, "
            fi
        done
        user_names=${user_names%, }

        if [ ! -z "$user_names" ]; then # Check if user_names is not empty
            echo "$(echo $group_name)|$(echo $user_names)" >> $tmp_file2
        fi

        # Update the progress bar
        progress=$((progress + 1))
        percentage=$((progress * 100 / total_groups))
        echo -ne "\\r${greenColour}Progress:${endColour} ["
        for i in {1..50}; do
            if [ $((i * 2)) -le $percentage ]; then
                echo -ne "${greenColour}#${endColour}"
            else
                echo -ne "-"
            fi
        done
        echo -ne "] ${greenColour}$percentage%${endColour}"
    done

    # Finish the progress bar
    echo -ne "\\r${greenColour}Progress:${endColour} ["
    for i in {1..50}; do
        if [ $((i * 2)) -le 100 ]; then
            echo -ne "${greenColour}#${endColour}"
        else
            echo -ne "-"
        fi
    done
    echo -ne "] ${greenColour}100%${endColour}\n\n"

    rm $tmp_file
    mv $tmp_file2 $tmp_file
    echo -ne "${blueColour}"; printTable '|' "$(cat $tmp_file)"; echo -ne "${endColour}"
    rm $tmp_file 2>/dev/null
}

function extract_DGroupsbyUser() {

    echo -e "\n${yellowColour}[*]${endColour}${grayColour} Enumerating Users and their Domain Groups...${endColour}\n"

    # Count the total number of users
    total_users=$(eval "$1 -c enumdomusers" | grep -oP '\[.*?\]' | grep "0x" | wc -l)

    # Initialize the progress bar
    progress=0
    echo -ne "${greenColour}Progress:${endColour} ["

    eval "$1 -c enumdomusers" | grep -oP '\[.*?\]' | grep "0x" | tr -d '[]' > $tmp_file

    echo "Users|Domain Groups" > $tmp_file2
    cat $tmp_file | while read rid_user; do
        user_name=$(eval "$1 -c \"queryuser $rid_user\"" | grep 'User Name' | cut -d ':' -f 2-)
        if [[ ! $user_name =~ \$$ ]]; then # Check if user_name does not end with $
            group_rids=$(eval "$1 -c \"queryusergroups $rid_user\"" | awk '{print $2}' | awk '{print $2}' FS=':' | tr -d '[]')
            group_names=""
            for rid_group in $group_rids; do
                group_name=$(eval "$1 -c \"querygroup $rid_group\"" | grep 'Group Name' | awk '{print $2}' FS=':')
                group_names+="$group_name, "
            done
            group_names=${group_names%, }

            if [ ! -z "$group_names" ]; then # Check if group_names is not empty
                echo "$(echo $user_name)|$(echo $group_names)" >> $tmp_file2
            fi
        fi

        # Update the progress bar
        progress=$((progress + 1))
        percentage=$((progress * 100 / total_users))
        echo -ne "\\r${greenColour}Progress:${endColour} ["
        for i in {1..50}; do
            if [ $((i * 2)) -le $percentage ]; then
                echo -ne "${greenColour}#${endColour}"
            else
                echo -ne "-"
            fi
        done
        echo -ne "] ${greenColour}$percentage%${endColour}"
    done

    # Finish the progress bar
    echo -ne "\\r${greenColour}Progress:${endColour} ["
    for i in {1..50}; do
        if [ $((i * 2)) -le 100 ]; then
            echo -ne "${greenColour}#${endColour}"
        else
            echo -ne "-"
        fi
    done
    echo -ne "] ${greenColour}100%${endColour}\n\n"

    rm $tmp_file
    mv $tmp_file2 $tmp_file
    echo -ne "${blueColour}"; printTable '|' "$(cat $tmp_file)"; echo -ne "${endColour}"
    rm $tmp_file 2>/dev/null
}


function beginEnumeration() {
    tput civis
    
    if [[ "${guest_session}" == "true" ]]; then
        rpcclient_cmd="rpcclient -U \"\" -N ${host_ip}"
    else
        rpcclient_cmd="rpcclient -U ${username}%${password} ${host_ip}"
    fi

    nmap -p139 --open -T5 -v -n ${host_ip} | grep open > /dev/null 2>&1 && port_status=$?

    if eval "${rpcclient_cmd} -c enumdomusers" > /dev/null 2>&1; then
        if [[ "${port_status}" == "0" ]]; then
            case "${enum_mode}" in
                DUsers)
                    extract_DUsers "${rpcclient_cmd}"
                    ;;
                DUsersInfo)
                    extract_DUsers_Info "${rpcclient_cmd}"
                    ;;
                DAUsers)
                    extract_DAUsers "${rpcclient_cmd}"
                    ;;
                DGroups)
                    extract_DGroups "${rpcclient_cmd}"
                    ;;
				DUsersbyGroup)
					extract_DUsersbyGroup "${rpcclient_cmd}"
					;;
				DGroupsbyUser)
					extract_DGroupsbyUser "${rpcclient_cmd}"
					;;
                All)
                    extract_All "${rpcclient_cmd}"
                    ;;
                *)
                    echo -e "\n${redColour}[!] OpciÃ³n no vÃ¡lida: ${enum_mode}${endColour}\n"
                    helpPanel
                    exit 1
                    ;;
            esac
        else
            echo -e "\n${redColour}[!] El puerto 139 parece estar cerrado en ${host_ip}${endColour}\n"
            tput cnorm
            exit 0
        fi
    else
        echo -e "\n${redColour}[!] Error: Acceso denegado${endColour}\n"
        tput cnorm
        exit 0
    fi

    tput cnorm
}

# Main Function

if [ "$(echo $UID)" == "0" ]; then

	guest_session=false

	while getopts ":e:i:u:p:Nh" opt; do
		case ${opt} in
			e)
				enum_mode="${OPTARG}"
				;;
			i)
				host_ip="${OPTARG}"
				;;
			u)
				username="${OPTARG}"
				;;
			p)
				password="${OPTARG}"
				;;
			N)
				guest_session=true
				;;
			h)
				helpPanel
				;;
			\?)
				echo -e "\n${redColour}[!] OpciÃ³n invÃ¡lida: -$OPTARG${endColour}\n"
				helpPanel
				exit 1
				;;
			:)
				echo -e "\n${redColour}[!] OpciÃ³n -$OPTARG requiere un argumento.${endColour}\n"
				helpPanel
				exit 1
				;;
		esac
	done

	# Verificar si se proporcionÃ³ la direcciÃ³n IP del host
	if [[ -z "${host_ip}" ]]; then
		echo -e "\n${redColour}[!] Es necesario proporcionar la direcciÃ³n IP del host a enumerar.${endColour}\n"
		helpPanel
		exit 1
	fi

	# Verificar si se proporcionÃ³ el modo de enumeraciÃ³n
	if [[ -z "${enum_mode}" ]]; then
		echo -e "\n${redColour}[!] Es necesario proporcionar el modo de enumeraciÃ³n.${endColour}\n"
		helpPanel
		exit 1
	fi

	# Comprobar si se ha especificado una sesiÃ³n de invitado o credenciales de usuario
    if [ "$guest_session" = false ] && [ -z "$username" -o -z "$password" ]; then
        echo -e "\n${redColour}[!] Debe especificar una sesiÃ³n de invitado (-N) o proporcionar un nombre de usuario y contraseÃ±a (-u y -p).${endColour}\n"
        helpPanel
        exit 1
    fi

	# Comenzar la enumeraciÃ³n
	beginEnumeration
else
	echo -e "\n${redColour}[*] It is necessary to run the program as root${endColour}\n"
fi
